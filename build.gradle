buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath('org.springframework.boot:spring-boot-gradle-plugin:2.0.4.RELEASE')
    }
}

apply plugin: 'java'
apply plugin: 'org.springframework.boot'

repositories {
    mavenCentral()
}

dependencies {
    // spring-boot
    compile 'org.springframework.boot:spring-boot-starter-tomcat:2.0.4.RELEASE'
    compile 'org.springframework.boot:spring-boot-starter-web:2.0.4.RELEASE'
    compile 'org.springframework.boot:spring-boot-devtools:2.0.4.RELEASE'
    compile 'org.springframework.boot:spring-boot-starter-data-jpa:2.0.4.RELEASE'

    // jackson-dataformat-xml
    compile 'com.fasterxml.jackson.dataformat:jackson-dataformat-xml:2.4.4'

    compile 'ch.qos.logback:logback-classic:1.1.2'

    // postgressql
    compile 'org.postgresql:postgresql:42.1.4'

    // hibernate
    compile 'org.hibernate:hibernate-core:5.3.5.Final'
    compile 'org.hibernate:hibernate-spatial:5.3.5.Final'

    // settings
    compile 'commons-configuration:commons-configuration:1.10'

    // lombok
    compileOnly 'org.projectlombok:lombok:1.18.2'
    annotationProcessor 'org.projectlombok:lombok:1.18.2'

    // testing
    testCompile 'io.rest-assured:spring-mock-mvc:3.0.5'
    testCompile 'org.springframework.boot:spring-boot-starter-test:2.0.4.RELEASE'

}

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/java')
        }
        resources.srcDir file('src/integration-test/resources')
    }
}


task integrationTest(type: Test) {
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    mustRunAfter test
}

check.dependsOn integrationTest

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}
